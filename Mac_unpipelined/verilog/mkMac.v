//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Sun Oct 27 04:14:16 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_read_A                     O     1 const
// RDY_read_B                     O     1 const
// RDY_read_C                     O     1 const
// RDY_read_S                     O     1 const
// mac_calc                       O    32 reg
// RDY_mac_calc                   O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// read_A_a_in                    I    16 reg
// read_B_b_in                    I    16 reg
// read_C_c_in                    I    32 reg
// read_S_s_in                    I     1 reg
// EN_read_A                      I     1
// EN_read_B                      I     1
// EN_read_C                      I     1
// EN_read_S                      I     1
// EN_mac_calc                    I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMac(CLK,
	     RST_N,

	     read_A_a_in,
	     EN_read_A,
	     RDY_read_A,

	     read_B_b_in,
	     EN_read_B,
	     RDY_read_B,

	     read_C_c_in,
	     EN_read_C,
	     RDY_read_C,

	     read_S_s_in,
	     EN_read_S,
	     RDY_read_S,

	     EN_mac_calc,
	     mac_calc,
	     RDY_mac_calc);
  input  CLK;
  input  RST_N;

  // action method read_A
  input  [15 : 0] read_A_a_in;
  input  EN_read_A;
  output RDY_read_A;

  // action method read_B
  input  [15 : 0] read_B_b_in;
  input  EN_read_B;
  output RDY_read_B;

  // action method read_C
  input  [31 : 0] read_C_c_in;
  input  EN_read_C;
  output RDY_read_C;

  // action method read_S
  input  read_S_s_in;
  input  EN_read_S;
  output RDY_read_S;

  // actionvalue method mac_calc
  input  EN_mac_calc;
  output [31 : 0] mac_calc;
  output RDY_mac_calc;

  // signals for module outputs
  wire [31 : 0] mac_calc;
  wire RDY_mac_calc, RDY_read_A, RDY_read_B, RDY_read_C, RDY_read_S;

  // register a
  reg [15 : 0] a;
  wire [15 : 0] a_D_IN;
  wire a_EN;

  // register b
  reg [15 : 0] b;
  wire [15 : 0] b_D_IN;
  wire b_EN;

  // register c
  reg [31 : 0] c;
  wire [31 : 0] c_D_IN;
  wire c_EN;

  // register out
  reg [31 : 0] out;
  wire [31 : 0] out_D_IN;
  wire out_EN;

  // register s
  reg s;
  wire s_D_IN, s_EN;

  // rule scheduling signals
  wire CAN_FIRE_mac_calc,
       CAN_FIRE_read_A,
       CAN_FIRE_read_B,
       CAN_FIRE_read_C,
       CAN_FIRE_read_S,
       WILL_FIRE_mac_calc,
       WILL_FIRE_read_A,
       WILL_FIRE_read_B,
       WILL_FIRE_read_C,
       WILL_FIRE_read_S;

  // remaining internal signals
  wire [31 : 0] IF_IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_ETC__q3,
		IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d321,
		IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d324,
		IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d328,
		IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d332,
		IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d337,
		IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d342,
		IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d348,
		IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d354,
		IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d361,
		IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d368,
		IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d376,
		IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d384,
		IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d393,
		IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d402,
		IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415,
		IF_x153_BIT_0_XOR_x114_BIT_0_THEN_1_ELSE_0__q2,
		product___1__h8975,
		product___1__h8976,
		product___2__h8929,
		product__h9377,
		product__h9400,
		product__h9423,
		product__h9446,
		product__h9469,
		product__h9492,
		product__h9515,
		product__h9538,
		product__h9561,
		product__h9584,
		product__h9607,
		product__h9630,
		product__h9653,
		product__h9676,
		product__h9699,
		x__h301,
		x__h8178;
  wire [29 : 0] IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d650;
  wire [27 : 0] IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d649;
  wire [25 : 0] IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d648;
  wire [23 : 0] IF_IF_IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_ETC___d294,
		IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d647,
		c_mant_aligned___1__h2119,
		c_mant_aligned__h337,
		result_mant_aligned___1__h8116,
		result_mant_aligned__h2044,
		result_mant_aligned__h336,
		result_mant_aligned__h347,
		x__h1153,
		x__h2114;
  wire [22 : 0] IF_IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_ETC___d291;
  wire [21 : 0] IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d646;
  wire [19 : 0] IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d645;
  wire [17 : 0] IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d644;
  wire [15 : 0] IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_4__ETC___d54,
		IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d643,
		IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1,
		IF_b_BIT_0_3_THEN_1_CONCAT_a_BITS_6_TO_0_4_5_E_ETC___d16,
		IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b___d300,
		IF_b_BIT_1_2_THEN_IF_b_BIT_0_3_THEN_1_CONCAT_a_ETC___d19,
		IF_b_BIT_2_1_THEN_IF_b_BIT_1_2_THEN_IF_b_BIT_0_ETC___d23,
		IF_b_BIT_3_0_THEN_IF_b_BIT_2_1_THEN_IF_b_BIT_1_ETC___d27,
		IF_b_BIT_4_THEN_IF_b_BIT_3_0_THEN_IF_b_BIT_2_1_ETC___d32,
		IF_b_BIT_5_THEN_IF_b_BIT_4_THEN_IF_b_BIT_3_0_T_ETC___d37,
		IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_4_THE_ETC___d48,
		_theResult_____4_fst__h1730,
		product__h1428,
		product__h1451,
		product__h1474,
		product__h1497,
		product__h1520,
		product__h1543,
		product__h1566,
		result_mant___1__h1618,
		result_mant__h1640;
  wire [13 : 0] IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d642;
  wire [11 : 0] IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d641;
  wire [9 : 0] IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d640;
  wire [7 : 0] IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d639,
	       _0_CONCAT_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_ETC___d64,
	       _theResult_____2_fst__h8018,
	       _theResult_____4_snd_fst__h1738,
	       delta_exp__h2042,
	       delta_exp__h2117,
	       i__h8085,
	       i__h8100,
	       result_exp___1__h1619,
	       result_exp___1__h1783,
	       result_exp___1__h8022,
	       result_exp__h326,
	       result_exp__h330,
	       result_exp__h335,
	       result_exp__h339,
	       rounded_result_mant__h1734,
	       x__h1800;
  wire [5 : 0] IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d638;
  wire [3 : 0] IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d637;
  wire [1 : 0] IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d636;
  wire IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d230,
       IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d245,
       IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d247,
       IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d248,
       IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d249,
       IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d250,
       IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d251,
       IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d252,
       IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d253,
       IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d254,
       IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d255,
       IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d256,
       IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d257,
       IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d258,
       IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d259,
       IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d260,
       IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d261,
       IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d262,
       IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d263,
       IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d264,
       IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d265,
       IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d266,
       IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d267,
       IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d268,
       IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d77,
       _theResult_____3_snd_snd_snd_snd__h2116,
       round_flag__h2043,
       round_flag__h2118,
       x__h10043,
       x__h10102,
       x__h10237,
       x__h10296,
       x__h10431,
       x__h10490,
       x__h10625,
       x__h10684,
       x__h10819,
       x__h10878,
       x__h11013,
       x__h11072,
       x__h11207,
       x__h11266,
       x__h11401,
       x__h11460,
       x__h11595,
       x__h11654,
       x__h11789,
       x__h11848,
       x__h11983,
       x__h12042,
       x__h12177,
       x__h12236,
       x__h12371,
       x__h12430,
       x__h12565,
       x__h12624,
       x__h12759,
       x__h12818,
       x__h12953,
       x__h13012,
       x__h13147,
       x__h13206,
       x__h13341,
       x__h13400,
       x__h13535,
       x__h13594,
       x__h13729,
       x__h13788,
       x__h13923,
       x__h13982,
       x__h14117,
       x__h14176,
       x__h14311,
       x__h14370,
       x__h14505,
       x__h14564,
       x__h14699,
       x__h14758,
       x__h14893,
       x__h14952,
       x__h15087,
       x__h15146,
       x__h15281,
       x__h15340,
       x__h15475,
       x__h15534,
       x__h15669,
       x__h15728,
       x__h2220,
       x__h2408,
       x__h2465,
       x__h2596,
       x__h2653,
       x__h2784,
       x__h2841,
       x__h2972,
       x__h3029,
       x__h3160,
       x__h3217,
       x__h3348,
       x__h3405,
       x__h3536,
       x__h3593,
       x__h3724,
       x__h3781,
       x__h3912,
       x__h3969,
       x__h4100,
       x__h4157,
       x__h4288,
       x__h4345,
       x__h4476,
       x__h4533,
       x__h4664,
       x__h4721,
       x__h4852,
       x__h4909,
       x__h5040,
       x__h5097,
       x__h5228,
       x__h5285,
       x__h5416,
       x__h5473,
       x__h5604,
       x__h5661,
       x__h5792,
       x__h5849,
       x__h5980,
       x__h6037,
       x__h6168,
       x__h6225,
       x__h6356,
       x__h6413,
       x__h6601,
       x__h9849,
       y__h10044,
       y__h10103,
       y__h10238,
       y__h10297,
       y__h10432,
       y__h10491,
       y__h10626,
       y__h10685,
       y__h10820,
       y__h10879,
       y__h11014,
       y__h11073,
       y__h11208,
       y__h11267,
       y__h11402,
       y__h11461,
       y__h11596,
       y__h11655,
       y__h11790,
       y__h11849,
       y__h11984,
       y__h12043,
       y__h12178,
       y__h12237,
       y__h12372,
       y__h12431,
       y__h12566,
       y__h12625,
       y__h12760,
       y__h12819,
       y__h12954,
       y__h13013,
       y__h13148,
       y__h13207,
       y__h13342,
       y__h13401,
       y__h13536,
       y__h13595,
       y__h13730,
       y__h13789,
       y__h13924,
       y__h13983,
       y__h14118,
       y__h14177,
       y__h14312,
       y__h14371,
       y__h14506,
       y__h14565,
       y__h14700,
       y__h14759,
       y__h14894,
       y__h14953,
       y__h15088,
       y__h15147,
       y__h15282,
       y__h15341,
       y__h15476,
       y__h15535,
       y__h15670,
       y__h15729,
       y__h2221,
       y__h2409,
       y__h2466,
       y__h2597,
       y__h2654,
       y__h2785,
       y__h2842,
       y__h2973,
       y__h3030,
       y__h3161,
       y__h3218,
       y__h3349,
       y__h3406,
       y__h3537,
       y__h3594,
       y__h3725,
       y__h3782,
       y__h3913,
       y__h3970,
       y__h4101,
       y__h4158,
       y__h4289,
       y__h4346,
       y__h4477,
       y__h4534,
       y__h4665,
       y__h4722,
       y__h4853,
       y__h4910,
       y__h5041,
       y__h5098,
       y__h5229,
       y__h5286,
       y__h5417,
       y__h5474,
       y__h5605,
       y__h5662,
       y__h5793,
       y__h5850,
       y__h5981,
       y__h6038,
       y__h6169,
       y__h6226,
       y__h6357,
       y__h6414,
       y__h6602,
       y__h9850;

  // action method read_A
  assign RDY_read_A = 1'd1 ;
  assign CAN_FIRE_read_A = 1'd1 ;
  assign WILL_FIRE_read_A = EN_read_A ;

  // action method read_B
  assign RDY_read_B = 1'd1 ;
  assign CAN_FIRE_read_B = 1'd1 ;
  assign WILL_FIRE_read_B = EN_read_B ;

  // action method read_C
  assign RDY_read_C = 1'd1 ;
  assign CAN_FIRE_read_C = 1'd1 ;
  assign WILL_FIRE_read_C = EN_read_C ;

  // action method read_S
  assign RDY_read_S = 1'd1 ;
  assign CAN_FIRE_read_S = 1'd1 ;
  assign WILL_FIRE_read_S = EN_read_S ;

  // actionvalue method mac_calc
  assign mac_calc = out ;
  assign RDY_mac_calc = 1'd1 ;
  assign CAN_FIRE_mac_calc = 1'd1 ;
  assign WILL_FIRE_mac_calc = EN_mac_calc ;

  // register a
  assign a_D_IN = read_A_a_in ;
  assign a_EN = EN_read_A ;

  // register b
  assign b_D_IN = read_B_b_in ;
  assign b_EN = EN_read_B ;

  // register c
  assign c_D_IN = read_C_c_in ;
  assign c_EN = EN_read_C ;

  // register out
  assign out_D_IN = s ? x__h301 : x__h8178 ;
  assign out_EN = EN_mac_calc ;

  // register s
  assign s_D_IN = read_S_s_in ;
  assign s_EN = EN_read_S ;

  // remaining internal signals
  assign IF_IF_IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_ETC___d294 =
	     (IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d230 ?
		IF_x153_BIT_0_XOR_x114_BIT_0_THEN_1_ELSE_0__q2[0] :
		_theResult_____3_snd_snd_snd_snd__h2116) ?
	       result_mant_aligned___1__h8116 :
	       result_mant_aligned__h347 ;
  assign IF_IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_ETC___d291 =
	     IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d230 ?
	       { IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d245,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d247,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d248,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d249,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d250,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d251,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d252,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d253,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d254,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d255,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d256,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d257,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d258,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d259,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d260,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d261,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d262,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d263,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d264,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d265,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d266,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d267,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d268 } :
	       { IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d247,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d248,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d249,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d250,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d251,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d252,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d253,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d254,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d255,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d256,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d257,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d258,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d259,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d260,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d261,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d262,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d263,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d264,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d265,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d266,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d267,
		 IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d268,
		 IF_x153_BIT_0_XOR_x114_BIT_0_THEN_1_ELSE_0__q2[0] } ;
  assign IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d230 =
	     x__h6601 | y__h6602 ;
  assign IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d245 =
	     x__h6356 ^ y__h6357 ;
  assign IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d247 =
	     x__h6168 ^ y__h6169 ;
  assign IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d248 =
	     x__h5980 ^ y__h5981 ;
  assign IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d249 =
	     x__h5792 ^ y__h5793 ;
  assign IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d250 =
	     x__h5604 ^ y__h5605 ;
  assign IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d251 =
	     x__h5416 ^ y__h5417 ;
  assign IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d252 =
	     x__h5228 ^ y__h5229 ;
  assign IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d253 =
	     x__h5040 ^ y__h5041 ;
  assign IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d254 =
	     x__h4852 ^ y__h4853 ;
  assign IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d255 =
	     x__h4664 ^ y__h4665 ;
  assign IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d256 =
	     x__h4476 ^ y__h4477 ;
  assign IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d257 =
	     x__h4288 ^ y__h4289 ;
  assign IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d258 =
	     x__h4100 ^ y__h4101 ;
  assign IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d259 =
	     x__h3912 ^ y__h3913 ;
  assign IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d260 =
	     x__h3724 ^ y__h3725 ;
  assign IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d261 =
	     x__h3536 ^ y__h3537 ;
  assign IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d262 =
	     x__h3348 ^ y__h3349 ;
  assign IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d263 =
	     x__h3160 ^ y__h3161 ;
  assign IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d264 =
	     x__h2972 ^ y__h2973 ;
  assign IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d265 =
	     x__h2784 ^ y__h2785 ;
  assign IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d266 =
	     x__h2596 ^ y__h2597 ;
  assign IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d267 =
	     x__h2408 ^ y__h2409 ;
  assign IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d268 =
	     x__h2220 ^ y__h2221 ;
  assign IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d77 =
	     result_exp__h335 <= c[30:23] ;
  assign IF_IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_ETC__q3 =
	     (IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[0] ^
	      c[0]) ?
	       32'd1 :
	       32'd0 ;
  assign IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d321 =
	     IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b___d300[0] ?
	       product__h9699 :
	       32'd0 ;
  assign IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d324 =
	     IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b___d300[1] ?
	       product__h9676 :
	       IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d321 ;
  assign IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d328 =
	     IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b___d300[2] ?
	       product__h9653 :
	       IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d324 ;
  assign IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d332 =
	     IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b___d300[3] ?
	       product__h9630 :
	       IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d328 ;
  assign IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d337 =
	     IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b___d300[4] ?
	       product__h9607 :
	       IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d332 ;
  assign IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d342 =
	     IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b___d300[5] ?
	       product__h9584 :
	       IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d337 ;
  assign IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d348 =
	     IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b___d300[6] ?
	       product__h9561 :
	       IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d342 ;
  assign IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d354 =
	     IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b___d300[7] ?
	       product__h9538 :
	       IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d348 ;
  assign IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d361 =
	     IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b___d300[8] ?
	       product__h9515 :
	       IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d354 ;
  assign IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d368 =
	     IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b___d300[9] ?
	       product__h9492 :
	       IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d361 ;
  assign IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d376 =
	     IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b___d300[10] ?
	       product__h9469 :
	       IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d368 ;
  assign IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d384 =
	     IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b___d300[11] ?
	       product__h9446 :
	       IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d376 ;
  assign IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d393 =
	     IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b___d300[12] ?
	       product__h9423 :
	       IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d384 ;
  assign IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d402 =
	     IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b___d300[13] ?
	       product__h9400 :
	       IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d393 ;
  assign IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_4__ETC___d54 =
	     IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_4_THE_ETC___d48[15] ?
	       result_mant___1__h1618 :
	       result_mant__h1640 ;
  assign IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415 =
	     (a[15] == b[15]) ? product___2__h8929 : product___1__h8976 ;
  assign IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d636 =
	     { x__h9849 ^ y__h9850,
	       IF_IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_ETC__q3[0] } ;
  assign IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d637 =
	     { x__h10237 ^ y__h10238,
	       x__h10043 ^ y__h10044,
	       IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d636 } ;
  assign IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d638 =
	     { x__h10625 ^ y__h10626,
	       x__h10431 ^ y__h10432,
	       IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d637 } ;
  assign IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d639 =
	     { x__h11013 ^ y__h11014,
	       x__h10819 ^ y__h10820,
	       IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d638 } ;
  assign IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d640 =
	     { x__h11401 ^ y__h11402,
	       x__h11207 ^ y__h11208,
	       IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d639 } ;
  assign IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d641 =
	     { x__h11789 ^ y__h11790,
	       x__h11595 ^ y__h11596,
	       IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d640 } ;
  assign IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d642 =
	     { x__h12177 ^ y__h12178,
	       x__h11983 ^ y__h11984,
	       IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d641 } ;
  assign IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d643 =
	     { x__h12565 ^ y__h12566,
	       x__h12371 ^ y__h12372,
	       IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d642 } ;
  assign IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d644 =
	     { x__h12953 ^ y__h12954,
	       x__h12759 ^ y__h12760,
	       IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d643 } ;
  assign IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d645 =
	     { x__h13341 ^ y__h13342,
	       x__h13147 ^ y__h13148,
	       IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d644 } ;
  assign IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d646 =
	     { x__h13729 ^ y__h13730,
	       x__h13535 ^ y__h13536,
	       IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d645 } ;
  assign IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d647 =
	     { x__h14117 ^ y__h14118,
	       x__h13923 ^ y__h13924,
	       IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d646 } ;
  assign IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d648 =
	     { x__h14505 ^ y__h14506,
	       x__h14311 ^ y__h14312,
	       IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d647 } ;
  assign IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d649 =
	     { x__h14893 ^ y__h14894,
	       x__h14699 ^ y__h14700,
	       IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d648 } ;
  assign IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d650 =
	     { x__h15281 ^ y__h15282,
	       x__h15087 ^ y__h15088,
	       IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d649 } ;
  assign IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1 = a[15] ? ~a + 16'd1 : a ;
  assign IF_b_BIT_0_3_THEN_1_CONCAT_a_BITS_6_TO_0_4_5_E_ETC___d16 =
	     b[0] ? product__h1566 : 16'd0 ;
  assign IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b___d300 =
	     b[15] ? ~b + 16'd1 : b ;
  assign IF_b_BIT_1_2_THEN_IF_b_BIT_0_3_THEN_1_CONCAT_a_ETC___d19 =
	     b[1] ?
	       product__h1543 :
	       IF_b_BIT_0_3_THEN_1_CONCAT_a_BITS_6_TO_0_4_5_E_ETC___d16 ;
  assign IF_b_BIT_2_1_THEN_IF_b_BIT_1_2_THEN_IF_b_BIT_0_ETC___d23 =
	     b[2] ?
	       product__h1520 :
	       IF_b_BIT_1_2_THEN_IF_b_BIT_0_3_THEN_1_CONCAT_a_ETC___d19 ;
  assign IF_b_BIT_3_0_THEN_IF_b_BIT_2_1_THEN_IF_b_BIT_1_ETC___d27 =
	     b[3] ?
	       product__h1497 :
	       IF_b_BIT_2_1_THEN_IF_b_BIT_1_2_THEN_IF_b_BIT_0_ETC___d23 ;
  assign IF_b_BIT_4_THEN_IF_b_BIT_3_0_THEN_IF_b_BIT_2_1_ETC___d32 =
	     b[4] ?
	       product__h1474 :
	       IF_b_BIT_3_0_THEN_IF_b_BIT_2_1_THEN_IF_b_BIT_1_ETC___d27 ;
  assign IF_b_BIT_5_THEN_IF_b_BIT_4_THEN_IF_b_BIT_3_0_T_ETC___d37 =
	     b[5] ?
	       product__h1451 :
	       IF_b_BIT_4_THEN_IF_b_BIT_3_0_THEN_IF_b_BIT_2_1_ETC___d32 ;
  assign IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_4_THE_ETC___d48 =
	     (b[6] ?
		product__h1428 :
		IF_b_BIT_5_THEN_IF_b_BIT_4_THEN_IF_b_BIT_3_0_T_ETC___d37) +
	     { 2'd1, a[6:0], 7'd0 } ;
  assign IF_x153_BIT_0_XOR_x114_BIT_0_THEN_1_ELSE_0__q2 =
	     (x__h1153[0] ^ x__h2114[0]) ? 32'd1 : 32'd0 ;
  assign _0_CONCAT_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_ETC___d64 =
	     rounded_result_mant__h1734 + 8'd1 ;
  assign _theResult_____2_fst__h8018 =
	     IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d230 ?
	       result_exp___1__h8022 :
	       result_exp__h339 ;
  assign _theResult_____3_snd_snd_snd_snd__h2116 =
	     IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d77 ?
	       round_flag__h2043 :
	       round_flag__h2118 ;
  assign _theResult_____4_fst__h1730 =
	     { (IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_4__ETC___d54[8] &&
		(IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_4__ETC___d54[9] ||
		 IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_4__ETC___d54[7:0] !=
		 8'b0)) ?
		 _0_CONCAT_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_ETC___d64[6:0] :
		 IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_4__ETC___d54[15:9],
	       9'd0 } ;
  assign _theResult_____4_snd_fst__h1738 =
	     _0_CONCAT_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_ETC___d64[7] ?
	       result_exp___1__h1783 :
	       result_exp__h330 ;
  assign c_mant_aligned___1__h2119 =
	     c_mant_aligned__h337 >> delta_exp__h2117 ;
  assign c_mant_aligned__h337 = { 1'b1, c[22:0] } ;
  assign delta_exp__h2042 = c[30:23] - result_exp__h335 ;
  assign delta_exp__h2117 = result_exp__h335 - c[30:23] ;
  assign i__h8085 = delta_exp__h2117 - 8'd1 ;
  assign i__h8100 = delta_exp__h2042 - 8'd1 ;
  assign product___1__h8975 = ~product___2__h8929 ;
  assign product___1__h8976 = product___1__h8975 + 32'd1 ;
  assign product___2__h8929 =
	     IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b___d300[14] ?
	       product__h9377 :
	       IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d402 ;
  assign product__h1428 =
	     IF_b_BIT_5_THEN_IF_b_BIT_4_THEN_IF_b_BIT_3_0_T_ETC___d37 +
	     { 3'd1, a[6:0], 6'd0 } ;
  assign product__h1451 =
	     IF_b_BIT_4_THEN_IF_b_BIT_3_0_THEN_IF_b_BIT_2_1_ETC___d32 +
	     { 4'd1, a[6:0], 5'd0 } ;
  assign product__h1474 =
	     IF_b_BIT_3_0_THEN_IF_b_BIT_2_1_THEN_IF_b_BIT_1_ETC___d27 +
	     { 5'd1, a[6:0], 4'd0 } ;
  assign product__h1497 =
	     IF_b_BIT_2_1_THEN_IF_b_BIT_1_2_THEN_IF_b_BIT_0_ETC___d23 +
	     { 6'd1, a[6:0], 3'd0 } ;
  assign product__h1520 =
	     IF_b_BIT_1_2_THEN_IF_b_BIT_0_3_THEN_1_CONCAT_a_ETC___d19 +
	     { 7'd1, a[6:0], 2'd0 } ;
  assign product__h1543 =
	     IF_b_BIT_0_3_THEN_1_CONCAT_a_BITS_6_TO_0_4_5_E_ETC___d16 +
	     { 8'd1, a[6:0], 1'd0 } ;
  assign product__h1566 = { 9'd1, a[6:0] } ;
  assign product__h9377 =
	     IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d402 +
	     { 3'd0, IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1[14:0], 14'd0 } ;
  assign product__h9400 =
	     IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d393 +
	     { 4'd0, IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1[14:0], 13'd0 } ;
  assign product__h9423 =
	     IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d384 +
	     { 5'd0, IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1[14:0], 12'd0 } ;
  assign product__h9446 =
	     IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d376 +
	     { 6'd0, IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1[14:0], 11'd0 } ;
  assign product__h9469 =
	     IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d368 +
	     { 7'd0, IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1[14:0], 10'd0 } ;
  assign product__h9492 =
	     IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d361 +
	     { 8'd0, IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1[14:0], 9'd0 } ;
  assign product__h9515 =
	     IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d354 +
	     { 9'd0, IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1[14:0], 8'd0 } ;
  assign product__h9538 =
	     IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d348 +
	     { 10'd0, IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1[14:0], 7'd0 } ;
  assign product__h9561 =
	     IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d342 +
	     { 11'd0, IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1[14:0], 6'd0 } ;
  assign product__h9584 =
	     IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d337 +
	     { 12'd0, IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1[14:0], 5'd0 } ;
  assign product__h9607 =
	     IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d332 +
	     { 13'd0, IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1[14:0], 4'd0 } ;
  assign product__h9630 =
	     IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d328 +
	     { 14'd0, IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1[14:0], 3'd0 } ;
  assign product__h9653 =
	     IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d324 +
	     { 15'd0, IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1[14:0], 2'd0 } ;
  assign product__h9676 =
	     IF_IF_b_BIT_15_THEN_INV_b_98_PLUS_1_99_ELSE_b__ETC___d321 +
	     { 16'd0, IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1[14:0], 1'd0 } ;
  assign product__h9699 =
	     { 17'd0, IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1[14:0] } ;
  assign result_exp___1__h1619 = x__h1800 + 8'd130 ;
  assign result_exp___1__h1783 = result_exp__h330 + 8'd1 ;
  assign result_exp___1__h8022 = result_exp__h339 + 8'd1 ;
  assign result_exp__h326 = x__h1800 + 8'd129 ;
  assign result_exp__h330 =
	     IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_4_THE_ETC___d48[15] ?
	       result_exp___1__h1619 :
	       result_exp__h326 ;
  assign result_exp__h335 =
	     (IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_4__ETC___d54[8] &&
	      (IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_4__ETC___d54[9] ||
	       IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_4__ETC___d54[7:0] !=
	       8'b0)) ?
	       _theResult_____4_snd_fst__h1738 :
	       result_exp__h330 ;
  assign result_exp__h339 =
	     IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d77 ?
	       c[30:23] :
	       result_exp__h335 ;
  assign result_mant___1__h1618 =
	     { IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_4_THE_ETC___d48[14:0],
	       1'b0 } ;
  assign result_mant__h1640 =
	     { IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_4_THE_ETC___d48[13:0],
	       2'b0 } ;
  assign result_mant_aligned___1__h8116 = result_mant_aligned__h347 + 24'd1 ;
  assign result_mant_aligned__h2044 =
	     result_mant_aligned__h336 >> delta_exp__h2042 ;
  assign result_mant_aligned__h336 =
	     { 1'b1, _theResult_____4_fst__h1730, 7'b0 } ;
  assign result_mant_aligned__h347 =
	     { IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d230 ||
	       IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b__ETC___d245,
	       IF_IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_ETC___d291 } ;
  assign round_flag__h2043 = result_mant_aligned__h336[i__h8100[4:0]] ;
  assign round_flag__h2118 = c_mant_aligned__h337[i__h8085[4:0]] ;
  assign rounded_result_mant__h1734 =
	     { 1'd0,
	       IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_4__ETC___d54[15:9] } ;
  assign x__h10043 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[2] ^
	     c[2] ;
  assign x__h10102 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[1] &
	     c[1] ;
  assign x__h10237 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[3] ^
	     c[3] ;
  assign x__h10296 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[2] &
	     c[2] ;
  assign x__h10431 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[4] ^
	     c[4] ;
  assign x__h10490 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[3] &
	     c[3] ;
  assign x__h10625 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[5] ^
	     c[5] ;
  assign x__h10684 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[4] &
	     c[4] ;
  assign x__h10819 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[6] ^
	     c[6] ;
  assign x__h10878 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[5] &
	     c[5] ;
  assign x__h11013 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[7] ^
	     c[7] ;
  assign x__h11072 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[6] &
	     c[6] ;
  assign x__h11207 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[8] ^
	     c[8] ;
  assign x__h11266 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[7] &
	     c[7] ;
  assign x__h11401 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[9] ^
	     c[9] ;
  assign x__h11460 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[8] &
	     c[8] ;
  assign x__h1153 =
	     IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d77 ?
	       result_mant_aligned__h2044 :
	       result_mant_aligned__h336 ;
  assign x__h11595 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[10] ^
	     c[10] ;
  assign x__h11654 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[9] &
	     c[9] ;
  assign x__h11789 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[11] ^
	     c[11] ;
  assign x__h11848 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[10] &
	     c[10] ;
  assign x__h11983 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[12] ^
	     c[12] ;
  assign x__h12042 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[11] &
	     c[11] ;
  assign x__h12177 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[13] ^
	     c[13] ;
  assign x__h12236 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[12] &
	     c[12] ;
  assign x__h12371 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[14] ^
	     c[14] ;
  assign x__h12430 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[13] &
	     c[13] ;
  assign x__h12565 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[15] ^
	     c[15] ;
  assign x__h12624 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[14] &
	     c[14] ;
  assign x__h12759 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[16] ^
	     c[16] ;
  assign x__h12818 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[15] &
	     c[15] ;
  assign x__h12953 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[17] ^
	     c[17] ;
  assign x__h13012 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[16] &
	     c[16] ;
  assign x__h13147 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[18] ^
	     c[18] ;
  assign x__h13206 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[17] &
	     c[17] ;
  assign x__h13341 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[19] ^
	     c[19] ;
  assign x__h13400 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[18] &
	     c[18] ;
  assign x__h13535 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[20] ^
	     c[20] ;
  assign x__h13594 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[19] &
	     c[19] ;
  assign x__h13729 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[21] ^
	     c[21] ;
  assign x__h13788 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[20] &
	     c[20] ;
  assign x__h13923 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[22] ^
	     c[22] ;
  assign x__h13982 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[21] &
	     c[21] ;
  assign x__h14117 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[23] ^
	     c[23] ;
  assign x__h14176 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[22] &
	     c[22] ;
  assign x__h14311 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[24] ^
	     c[24] ;
  assign x__h14370 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[23] &
	     c[23] ;
  assign x__h14505 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[25] ^
	     c[25] ;
  assign x__h14564 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[24] &
	     c[24] ;
  assign x__h14699 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[26] ^
	     c[26] ;
  assign x__h14758 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[25] &
	     c[25] ;
  assign x__h14893 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[27] ^
	     c[27] ;
  assign x__h14952 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[26] &
	     c[26] ;
  assign x__h15087 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[28] ^
	     c[28] ;
  assign x__h15146 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[27] &
	     c[27] ;
  assign x__h15281 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[29] ^
	     c[29] ;
  assign x__h15340 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[28] &
	     c[28] ;
  assign x__h15475 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[30] ^
	     c[30] ;
  assign x__h15534 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[29] &
	     c[29] ;
  assign x__h15669 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[31] ^
	     c[31] ;
  assign x__h15728 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[30] &
	     c[30] ;
  assign x__h1800 = a[14:7] + b[14:7] ;
  assign x__h2114 =
	     IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d77 ?
	       c_mant_aligned__h337 :
	       c_mant_aligned___1__h2119 ;
  assign x__h2220 = x__h1153[1] ^ x__h2114[1] ;
  assign x__h2408 = x__h1153[2] ^ x__h2114[2] ;
  assign x__h2465 = x__h1153[1] & x__h2114[1] ;
  assign x__h2596 = x__h1153[3] ^ x__h2114[3] ;
  assign x__h2653 = x__h1153[2] & x__h2114[2] ;
  assign x__h2784 = x__h1153[4] ^ x__h2114[4] ;
  assign x__h2841 = x__h1153[3] & x__h2114[3] ;
  assign x__h2972 = x__h1153[5] ^ x__h2114[5] ;
  assign x__h301 =
	     { a[15] ^ b[15],
	       _theResult_____2_fst__h8018,
	       IF_IF_IF_IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_ETC___d294[22:0] } ;
  assign x__h3029 = x__h1153[4] & x__h2114[4] ;
  assign x__h3160 = x__h1153[6] ^ x__h2114[6] ;
  assign x__h3217 = x__h1153[5] & x__h2114[5] ;
  assign x__h3348 = x__h1153[7] ^ x__h2114[7] ;
  assign x__h3405 = x__h1153[6] & x__h2114[6] ;
  assign x__h3536 = x__h1153[8] ^ x__h2114[8] ;
  assign x__h3593 = x__h1153[7] & x__h2114[7] ;
  assign x__h3724 = x__h1153[9] ^ x__h2114[9] ;
  assign x__h3781 = x__h1153[8] & x__h2114[8] ;
  assign x__h3912 = x__h1153[10] ^ x__h2114[10] ;
  assign x__h3969 = x__h1153[9] & x__h2114[9] ;
  assign x__h4100 = x__h1153[11] ^ x__h2114[11] ;
  assign x__h4157 = x__h1153[10] & x__h2114[10] ;
  assign x__h4288 = x__h1153[12] ^ x__h2114[12] ;
  assign x__h4345 = x__h1153[11] & x__h2114[11] ;
  assign x__h4476 = x__h1153[13] ^ x__h2114[13] ;
  assign x__h4533 = x__h1153[12] & x__h2114[12] ;
  assign x__h4664 = x__h1153[14] ^ x__h2114[14] ;
  assign x__h4721 = x__h1153[13] & x__h2114[13] ;
  assign x__h4852 = x__h1153[15] ^ x__h2114[15] ;
  assign x__h4909 = x__h1153[14] & x__h2114[14] ;
  assign x__h5040 = x__h1153[16] ^ x__h2114[16] ;
  assign x__h5097 = x__h1153[15] & x__h2114[15] ;
  assign x__h5228 = x__h1153[17] ^ x__h2114[17] ;
  assign x__h5285 = x__h1153[16] & x__h2114[16] ;
  assign x__h5416 = x__h1153[18] ^ x__h2114[18] ;
  assign x__h5473 = x__h1153[17] & x__h2114[17] ;
  assign x__h5604 = x__h1153[19] ^ x__h2114[19] ;
  assign x__h5661 = x__h1153[18] & x__h2114[18] ;
  assign x__h5792 = x__h1153[20] ^ x__h2114[20] ;
  assign x__h5849 = x__h1153[19] & x__h2114[19] ;
  assign x__h5980 = x__h1153[21] ^ x__h2114[21] ;
  assign x__h6037 = x__h1153[20] & x__h2114[20] ;
  assign x__h6168 = x__h1153[22] ^ x__h2114[22] ;
  assign x__h6225 = x__h1153[21] & x__h2114[21] ;
  assign x__h6356 = x__h1153[23] ^ x__h2114[23] ;
  assign x__h6413 = x__h1153[22] & x__h2114[22] ;
  assign x__h6601 = x__h1153[23] & x__h2114[23] ;
  assign x__h8178 =
	     { x__h15669 ^ y__h15670,
	       x__h15475 ^ y__h15476,
	       IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d650 } ;
  assign x__h9849 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[1] ^
	     c[1] ;
  assign y__h10044 = x__h10102 | y__h10103 ;
  assign y__h10103 = y__h9850 & x__h9849 ;
  assign y__h10238 = x__h10296 | y__h10297 ;
  assign y__h10297 = y__h10044 & x__h10043 ;
  assign y__h10432 = x__h10490 | y__h10491 ;
  assign y__h10491 = y__h10238 & x__h10237 ;
  assign y__h10626 = x__h10684 | y__h10685 ;
  assign y__h10685 = y__h10432 & x__h10431 ;
  assign y__h10820 = x__h10878 | y__h10879 ;
  assign y__h10879 = y__h10626 & x__h10625 ;
  assign y__h11014 = x__h11072 | y__h11073 ;
  assign y__h11073 = y__h10820 & x__h10819 ;
  assign y__h11208 = x__h11266 | y__h11267 ;
  assign y__h11267 = y__h11014 & x__h11013 ;
  assign y__h11402 = x__h11460 | y__h11461 ;
  assign y__h11461 = y__h11208 & x__h11207 ;
  assign y__h11596 = x__h11654 | y__h11655 ;
  assign y__h11655 = y__h11402 & x__h11401 ;
  assign y__h11790 = x__h11848 | y__h11849 ;
  assign y__h11849 = y__h11596 & x__h11595 ;
  assign y__h11984 = x__h12042 | y__h12043 ;
  assign y__h12043 = y__h11790 & x__h11789 ;
  assign y__h12178 = x__h12236 | y__h12237 ;
  assign y__h12237 = y__h11984 & x__h11983 ;
  assign y__h12372 = x__h12430 | y__h12431 ;
  assign y__h12431 = y__h12178 & x__h12177 ;
  assign y__h12566 = x__h12624 | y__h12625 ;
  assign y__h12625 = y__h12372 & x__h12371 ;
  assign y__h12760 = x__h12818 | y__h12819 ;
  assign y__h12819 = y__h12566 & x__h12565 ;
  assign y__h12954 = x__h13012 | y__h13013 ;
  assign y__h13013 = y__h12760 & x__h12759 ;
  assign y__h13148 = x__h13206 | y__h13207 ;
  assign y__h13207 = y__h12954 & x__h12953 ;
  assign y__h13342 = x__h13400 | y__h13401 ;
  assign y__h13401 = y__h13148 & x__h13147 ;
  assign y__h13536 = x__h13594 | y__h13595 ;
  assign y__h13595 = y__h13342 & x__h13341 ;
  assign y__h13730 = x__h13788 | y__h13789 ;
  assign y__h13789 = y__h13536 & x__h13535 ;
  assign y__h13924 = x__h13982 | y__h13983 ;
  assign y__h13983 = y__h13730 & x__h13729 ;
  assign y__h14118 = x__h14176 | y__h14177 ;
  assign y__h14177 = y__h13924 & x__h13923 ;
  assign y__h14312 = x__h14370 | y__h14371 ;
  assign y__h14371 = y__h14118 & x__h14117 ;
  assign y__h14506 = x__h14564 | y__h14565 ;
  assign y__h14565 = y__h14312 & x__h14311 ;
  assign y__h14700 = x__h14758 | y__h14759 ;
  assign y__h14759 = y__h14506 & x__h14505 ;
  assign y__h14894 = x__h14952 | y__h14953 ;
  assign y__h14953 = y__h14700 & x__h14699 ;
  assign y__h15088 = x__h15146 | y__h15147 ;
  assign y__h15147 = y__h14894 & x__h14893 ;
  assign y__h15282 = x__h15340 | y__h15341 ;
  assign y__h15341 = y__h15088 & x__h15087 ;
  assign y__h15476 = x__h15534 | y__h15535 ;
  assign y__h15535 = y__h15282 & x__h15281 ;
  assign y__h15670 = x__h15728 | y__h15729 ;
  assign y__h15729 = y__h15476 & x__h15475 ;
  assign y__h2221 = x__h1153[0] & x__h2114[0] ;
  assign y__h2409 = x__h2465 | y__h2466 ;
  assign y__h2466 = y__h2221 & x__h2220 ;
  assign y__h2597 = x__h2653 | y__h2654 ;
  assign y__h2654 = y__h2409 & x__h2408 ;
  assign y__h2785 = x__h2841 | y__h2842 ;
  assign y__h2842 = y__h2597 & x__h2596 ;
  assign y__h2973 = x__h3029 | y__h3030 ;
  assign y__h3030 = y__h2785 & x__h2784 ;
  assign y__h3161 = x__h3217 | y__h3218 ;
  assign y__h3218 = y__h2973 & x__h2972 ;
  assign y__h3349 = x__h3405 | y__h3406 ;
  assign y__h3406 = y__h3161 & x__h3160 ;
  assign y__h3537 = x__h3593 | y__h3594 ;
  assign y__h3594 = y__h3349 & x__h3348 ;
  assign y__h3725 = x__h3781 | y__h3782 ;
  assign y__h3782 = y__h3537 & x__h3536 ;
  assign y__h3913 = x__h3969 | y__h3970 ;
  assign y__h3970 = y__h3725 & x__h3724 ;
  assign y__h4101 = x__h4157 | y__h4158 ;
  assign y__h4158 = y__h3913 & x__h3912 ;
  assign y__h4289 = x__h4345 | y__h4346 ;
  assign y__h4346 = y__h4101 & x__h4100 ;
  assign y__h4477 = x__h4533 | y__h4534 ;
  assign y__h4534 = y__h4289 & x__h4288 ;
  assign y__h4665 = x__h4721 | y__h4722 ;
  assign y__h4722 = y__h4477 & x__h4476 ;
  assign y__h4853 = x__h4909 | y__h4910 ;
  assign y__h4910 = y__h4665 & x__h4664 ;
  assign y__h5041 = x__h5097 | y__h5098 ;
  assign y__h5098 = y__h4853 & x__h4852 ;
  assign y__h5229 = x__h5285 | y__h5286 ;
  assign y__h5286 = y__h5041 & x__h5040 ;
  assign y__h5417 = x__h5473 | y__h5474 ;
  assign y__h5474 = y__h5229 & x__h5228 ;
  assign y__h5605 = x__h5661 | y__h5662 ;
  assign y__h5662 = y__h5417 & x__h5416 ;
  assign y__h5793 = x__h5849 | y__h5850 ;
  assign y__h5850 = y__h5605 & x__h5604 ;
  assign y__h5981 = x__h6037 | y__h6038 ;
  assign y__h6038 = y__h5793 & x__h5792 ;
  assign y__h6169 = x__h6225 | y__h6226 ;
  assign y__h6226 = y__h5981 & x__h5980 ;
  assign y__h6357 = x__h6413 | y__h6414 ;
  assign y__h6414 = y__h6169 & x__h6168 ;
  assign y__h6602 = y__h6357 & x__h6356 ;
  assign y__h9850 =
	     IF_a_BIT_15_EQ_b_BIT_15_97_THEN_IF_IF_b_BIT_15_ETC___d415[0] &
	     c[0] ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        a <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b <= `BSV_ASSIGNMENT_DELAY 16'd0;
	c <= `BSV_ASSIGNMENT_DELAY 32'd0;
	out <= `BSV_ASSIGNMENT_DELAY 32'd0;
	s <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (a_EN) a <= `BSV_ASSIGNMENT_DELAY a_D_IN;
	if (b_EN) b <= `BSV_ASSIGNMENT_DELAY b_D_IN;
	if (c_EN) c <= `BSV_ASSIGNMENT_DELAY c_D_IN;
	if (out_EN) out <= `BSV_ASSIGNMENT_DELAY out_D_IN;
	if (s_EN) s <= `BSV_ASSIGNMENT_DELAY s_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    a = 16'hAAAA;
    b = 16'hAAAA;
    c = 32'hAAAAAAAA;
    out = 32'hAAAAAAAA;
    s = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkMac

