//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Fri Oct 25 15:08:53 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_read_A                     O     1 const
// RDY_read_B                     O     1 const
// RDY_read_C                     O     1 const
// RDY_read_S                     O     1 const
// mac_calc                       O    32 reg
// RDY_mac_calc                   O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// read_A_a_in                    I    16 reg
// read_B_b_in                    I    16 reg
// read_C_c_in                    I    32 reg
// read_S_s_in                    I     1 reg
// EN_read_A                      I     1
// EN_read_B                      I     1
// EN_read_C                      I     1
// EN_read_S                      I     1
// EN_mac_calc                    I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMac(CLK,
	     RST_N,

	     read_A_a_in,
	     EN_read_A,
	     RDY_read_A,

	     read_B_b_in,
	     EN_read_B,
	     RDY_read_B,

	     read_C_c_in,
	     EN_read_C,
	     RDY_read_C,

	     read_S_s_in,
	     EN_read_S,
	     RDY_read_S,

	     EN_mac_calc,
	     mac_calc,
	     RDY_mac_calc);
  input  CLK;
  input  RST_N;

  // action method read_A
  input  [15 : 0] read_A_a_in;
  input  EN_read_A;
  output RDY_read_A;

  // action method read_B
  input  [15 : 0] read_B_b_in;
  input  EN_read_B;
  output RDY_read_B;

  // action method read_C
  input  [31 : 0] read_C_c_in;
  input  EN_read_C;
  output RDY_read_C;

  // action method read_S
  input  read_S_s_in;
  input  EN_read_S;
  output RDY_read_S;

  // actionvalue method mac_calc
  input  EN_mac_calc;
  output [31 : 0] mac_calc;
  output RDY_mac_calc;

  // signals for module outputs
  wire [31 : 0] mac_calc;
  wire RDY_mac_calc, RDY_read_A, RDY_read_B, RDY_read_C, RDY_read_S;

  // register a
  reg [15 : 0] a;
  wire [15 : 0] a_D_IN;
  wire a_EN;

  // register b
  reg [15 : 0] b;
  wire [15 : 0] b_D_IN;
  wire b_EN;

  // register c
  reg [31 : 0] c;
  wire [31 : 0] c_D_IN;
  wire c_EN;

  // register out
  reg [31 : 0] out;
  wire [31 : 0] out_D_IN;
  wire out_EN;

  // register s
  reg s;
  wire s_D_IN, s_EN;

  // rule scheduling signals
  wire CAN_FIRE_mac_calc,
       CAN_FIRE_read_A,
       CAN_FIRE_read_B,
       CAN_FIRE_read_C,
       CAN_FIRE_read_S,
       WILL_FIRE_mac_calc,
       WILL_FIRE_read_A,
       WILL_FIRE_read_B,
       WILL_FIRE_read_C,
       WILL_FIRE_read_S;

  // remaining internal signals
  wire [31 : 0] IF_IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_ETC__q3,
		IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d268,
		IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d271,
		IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d275,
		IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d279,
		IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d284,
		IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d289,
		IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d295,
		IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d301,
		IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d308,
		IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d315,
		IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d323,
		IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d331,
		IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d340,
		IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d349,
		IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362,
		IF_x721_BIT_0_XOR_x838_BIT_0_THEN_1_ELSE_0__q2,
		product___1__h8549,
		product___1__h8550,
		product___2__h8503,
		product__h8951,
		product__h8974,
		product__h8997,
		product__h9020,
		product__h9043,
		product__h9066,
		product__h9089,
		product__h9112,
		product__h9135,
		product__h9158,
		product__h9181,
		product__h9204,
		product__h9227,
		product__h9250,
		product__h9273,
		x__h301,
		x__h7752;
  wire [29 : 0] IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d597;
  wire [27 : 0] IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d596;
  wire [25 : 0] IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d595;
  wire [23 : 0] IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d594,
		c_mant_aligned___1__h1728,
		c_mant_aligned__h332,
		result_mant_aligned__h1727,
		result_mant_aligned__h934,
		x__h1721,
		x__h1838;
  wire [22 : 0] IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d242;
  wire [21 : 0] IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d593;
  wire [20 : 0] IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d241;
  wire [19 : 0] IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d592;
  wire [18 : 0] IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d240;
  wire [17 : 0] IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d591;
  wire [16 : 0] IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d239;
  wire [15 : 0] IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d590,
		IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1,
		IF_b_BIT_0_3_THEN_1_CONCAT_a_BITS_6_TO_0_4_5_E_ETC___d16,
		IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b___d247,
		IF_b_BIT_1_2_THEN_IF_b_BIT_0_3_THEN_1_CONCAT_a_ETC___d19,
		IF_b_BIT_2_1_THEN_IF_b_BIT_1_2_THEN_IF_b_BIT_0_ETC___d23,
		IF_b_BIT_3_0_THEN_IF_b_BIT_2_1_THEN_IF_b_BIT_1_ETC___d27,
		IF_b_BIT_4_THEN_IF_b_BIT_3_0_THEN_IF_b_BIT_2_1_ETC___d32,
		IF_b_BIT_5_THEN_IF_b_BIT_4_THEN_IF_b_BIT_3_0_T_ETC___d37,
		IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_4_THE_ETC___d48,
		product__h650,
		product__h673,
		product__h696,
		product__h719,
		product__h742,
		product__h765,
		product__h788,
		result_mant___1__h840,
		result_mant__h1750,
		result_mant__h329;
  wire [14 : 0] IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d238;
  wire [13 : 0] IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d589;
  wire [12 : 0] IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d237;
  wire [11 : 0] IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d588;
  wire [10 : 0] IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d236;
  wire [9 : 0] IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d587;
  wire [8 : 0] IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d235;
  wire [7 : 0] IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d586,
	       _theResult_____1_fst__h931,
	       delta_exp__h1726,
	       delta_exp__h933,
	       result_exp___1__h841,
	       result_exp__h326,
	       result_exp__h330,
	       x__h858;
  wire [6 : 0] IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d234;
  wire [5 : 0] IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d585;
  wire [4 : 0] IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d233;
  wire [3 : 0] IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d584;
  wire [2 : 0] IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d232;
  wire [1 : 0] IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d583;
  wire IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_4__ETC___d58,
       x__h10005,
       x__h10064,
       x__h10199,
       x__h10258,
       x__h10393,
       x__h10452,
       x__h10587,
       x__h10646,
       x__h10781,
       x__h10840,
       x__h10975,
       x__h11034,
       x__h11169,
       x__h11228,
       x__h11363,
       x__h11422,
       x__h11557,
       x__h11616,
       x__h11751,
       x__h11810,
       x__h11945,
       x__h12004,
       x__h12139,
       x__h12198,
       x__h12333,
       x__h12392,
       x__h12527,
       x__h12586,
       x__h12721,
       x__h12780,
       x__h12915,
       x__h12974,
       x__h13109,
       x__h13168,
       x__h13303,
       x__h13362,
       x__h13497,
       x__h13556,
       x__h13691,
       x__h13750,
       x__h13885,
       x__h13944,
       x__h14079,
       x__h14138,
       x__h14273,
       x__h14332,
       x__h14467,
       x__h14526,
       x__h14661,
       x__h14720,
       x__h14855,
       x__h14914,
       x__h15049,
       x__h15108,
       x__h15243,
       x__h15302,
       x__h1938,
       x__h2126,
       x__h2183,
       x__h2314,
       x__h2371,
       x__h2502,
       x__h2559,
       x__h2690,
       x__h2747,
       x__h2878,
       x__h2935,
       x__h3066,
       x__h3123,
       x__h3254,
       x__h3311,
       x__h3442,
       x__h3499,
       x__h3630,
       x__h3687,
       x__h3818,
       x__h3875,
       x__h4006,
       x__h4063,
       x__h4194,
       x__h4251,
       x__h4382,
       x__h4439,
       x__h4570,
       x__h4627,
       x__h4758,
       x__h4815,
       x__h4946,
       x__h5003,
       x__h5134,
       x__h5191,
       x__h5322,
       x__h5379,
       x__h5510,
       x__h5567,
       x__h5698,
       x__h5755,
       x__h5886,
       x__h5943,
       x__h9423,
       x__h9617,
       x__h9676,
       x__h9811,
       x__h9870,
       y__h10006,
       y__h10065,
       y__h10200,
       y__h10259,
       y__h10394,
       y__h10453,
       y__h10588,
       y__h10647,
       y__h10782,
       y__h10841,
       y__h10976,
       y__h11035,
       y__h11170,
       y__h11229,
       y__h11364,
       y__h11423,
       y__h11558,
       y__h11617,
       y__h11752,
       y__h11811,
       y__h11946,
       y__h12005,
       y__h12140,
       y__h12199,
       y__h12334,
       y__h12393,
       y__h12528,
       y__h12587,
       y__h12722,
       y__h12781,
       y__h12916,
       y__h12975,
       y__h13110,
       y__h13169,
       y__h13304,
       y__h13363,
       y__h13498,
       y__h13557,
       y__h13692,
       y__h13751,
       y__h13886,
       y__h13945,
       y__h14080,
       y__h14139,
       y__h14274,
       y__h14333,
       y__h14468,
       y__h14527,
       y__h14662,
       y__h14721,
       y__h14856,
       y__h14915,
       y__h15050,
       y__h15109,
       y__h15244,
       y__h15303,
       y__h1939,
       y__h2127,
       y__h2184,
       y__h2315,
       y__h2372,
       y__h2503,
       y__h2560,
       y__h2691,
       y__h2748,
       y__h2879,
       y__h2936,
       y__h3067,
       y__h3124,
       y__h3255,
       y__h3312,
       y__h3443,
       y__h3500,
       y__h3631,
       y__h3688,
       y__h3819,
       y__h3876,
       y__h4007,
       y__h4064,
       y__h4195,
       y__h4252,
       y__h4383,
       y__h4440,
       y__h4571,
       y__h4628,
       y__h4759,
       y__h4816,
       y__h4947,
       y__h5004,
       y__h5135,
       y__h5192,
       y__h5323,
       y__h5380,
       y__h5511,
       y__h5568,
       y__h5699,
       y__h5756,
       y__h5887,
       y__h5944,
       y__h9424,
       y__h9618,
       y__h9677,
       y__h9812,
       y__h9871;

  // action method read_A
  assign RDY_read_A = 1'd1 ;
  assign CAN_FIRE_read_A = 1'd1 ;
  assign WILL_FIRE_read_A = EN_read_A ;

  // action method read_B
  assign RDY_read_B = 1'd1 ;
  assign CAN_FIRE_read_B = 1'd1 ;
  assign WILL_FIRE_read_B = EN_read_B ;

  // action method read_C
  assign RDY_read_C = 1'd1 ;
  assign CAN_FIRE_read_C = 1'd1 ;
  assign WILL_FIRE_read_C = EN_read_C ;

  // action method read_S
  assign RDY_read_S = 1'd1 ;
  assign CAN_FIRE_read_S = 1'd1 ;
  assign WILL_FIRE_read_S = EN_read_S ;

  // actionvalue method mac_calc
  assign mac_calc = out ;
  assign RDY_mac_calc = 1'd1 ;
  assign CAN_FIRE_mac_calc = 1'd1 ;
  assign WILL_FIRE_mac_calc = EN_mac_calc ;

  // register a
  assign a_D_IN = read_A_a_in ;
  assign a_EN = EN_read_A ;

  // register b
  assign b_D_IN = read_B_b_in ;
  assign b_EN = EN_read_B ;

  // register c
  assign c_D_IN = read_C_c_in ;
  assign c_EN = EN_read_C ;

  // register out
  assign out_D_IN = s ? x__h301 : x__h7752 ;
  assign out_EN = EN_mac_calc ;

  // register s
  assign s_D_IN = read_S_s_in ;
  assign s_EN = EN_read_S ;

  // remaining internal signals
  assign IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d232 =
	     { x__h2126 ^ y__h2127,
	       x__h1938 ^ y__h1939,
	       IF_x721_BIT_0_XOR_x838_BIT_0_THEN_1_ELSE_0__q2[0] } ;
  assign IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d233 =
	     { x__h2502 ^ y__h2503,
	       x__h2314 ^ y__h2315,
	       IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d232 } ;
  assign IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d234 =
	     { x__h2878 ^ y__h2879,
	       x__h2690 ^ y__h2691,
	       IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d233 } ;
  assign IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d235 =
	     { x__h3254 ^ y__h3255,
	       x__h3066 ^ y__h3067,
	       IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d234 } ;
  assign IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d236 =
	     { x__h3630 ^ y__h3631,
	       x__h3442 ^ y__h3443,
	       IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d235 } ;
  assign IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d237 =
	     { x__h4006 ^ y__h4007,
	       x__h3818 ^ y__h3819,
	       IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d236 } ;
  assign IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d238 =
	     { x__h4382 ^ y__h4383,
	       x__h4194 ^ y__h4195,
	       IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d237 } ;
  assign IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d239 =
	     { x__h4758 ^ y__h4759,
	       x__h4570 ^ y__h4571,
	       IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d238 } ;
  assign IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d240 =
	     { x__h5134 ^ y__h5135,
	       x__h4946 ^ y__h4947,
	       IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d239 } ;
  assign IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d241 =
	     { x__h5510 ^ y__h5511,
	       x__h5322 ^ y__h5323,
	       IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d240 } ;
  assign IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d242 =
	     { x__h5886 ^ y__h5887,
	       x__h5698 ^ y__h5699,
	       IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d241 } ;
  assign IF_IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_ETC__q3 =
	     (IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[0] ^
	      c[0]) ?
	       32'd1 :
	       32'd0 ;
  assign IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d268 =
	     IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b___d247[0] ?
	       product__h9273 :
	       32'd0 ;
  assign IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d271 =
	     IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b___d247[1] ?
	       product__h9250 :
	       IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d268 ;
  assign IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d275 =
	     IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b___d247[2] ?
	       product__h9227 :
	       IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d271 ;
  assign IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d279 =
	     IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b___d247[3] ?
	       product__h9204 :
	       IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d275 ;
  assign IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d284 =
	     IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b___d247[4] ?
	       product__h9181 :
	       IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d279 ;
  assign IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d289 =
	     IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b___d247[5] ?
	       product__h9158 :
	       IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d284 ;
  assign IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d295 =
	     IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b___d247[6] ?
	       product__h9135 :
	       IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d289 ;
  assign IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d301 =
	     IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b___d247[7] ?
	       product__h9112 :
	       IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d295 ;
  assign IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d308 =
	     IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b___d247[8] ?
	       product__h9089 :
	       IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d301 ;
  assign IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d315 =
	     IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b___d247[9] ?
	       product__h9066 :
	       IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d308 ;
  assign IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d323 =
	     IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b___d247[10] ?
	       product__h9043 :
	       IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d315 ;
  assign IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d331 =
	     IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b___d247[11] ?
	       product__h9020 :
	       IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d323 ;
  assign IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d340 =
	     IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b___d247[12] ?
	       product__h8997 :
	       IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d331 ;
  assign IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d349 =
	     IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b___d247[13] ?
	       product__h8974 :
	       IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d340 ;
  assign IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_4__ETC___d58 =
	     result_exp__h330 <= c[30:23] ;
  assign IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362 =
	     (a[15] == b[15]) ? product___2__h8503 : product___1__h8550 ;
  assign IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d583 =
	     { x__h9423 ^ y__h9424,
	       IF_IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_ETC__q3[0] } ;
  assign IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d584 =
	     { x__h9811 ^ y__h9812,
	       x__h9617 ^ y__h9618,
	       IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d583 } ;
  assign IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d585 =
	     { x__h10199 ^ y__h10200,
	       x__h10005 ^ y__h10006,
	       IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d584 } ;
  assign IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d586 =
	     { x__h10587 ^ y__h10588,
	       x__h10393 ^ y__h10394,
	       IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d585 } ;
  assign IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d587 =
	     { x__h10975 ^ y__h10976,
	       x__h10781 ^ y__h10782,
	       IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d586 } ;
  assign IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d588 =
	     { x__h11363 ^ y__h11364,
	       x__h11169 ^ y__h11170,
	       IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d587 } ;
  assign IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d589 =
	     { x__h11751 ^ y__h11752,
	       x__h11557 ^ y__h11558,
	       IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d588 } ;
  assign IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d590 =
	     { x__h12139 ^ y__h12140,
	       x__h11945 ^ y__h11946,
	       IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d589 } ;
  assign IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d591 =
	     { x__h12527 ^ y__h12528,
	       x__h12333 ^ y__h12334,
	       IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d590 } ;
  assign IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d592 =
	     { x__h12915 ^ y__h12916,
	       x__h12721 ^ y__h12722,
	       IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d591 } ;
  assign IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d593 =
	     { x__h13303 ^ y__h13304,
	       x__h13109 ^ y__h13110,
	       IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d592 } ;
  assign IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d594 =
	     { x__h13691 ^ y__h13692,
	       x__h13497 ^ y__h13498,
	       IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d593 } ;
  assign IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d595 =
	     { x__h14079 ^ y__h14080,
	       x__h13885 ^ y__h13886,
	       IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d594 } ;
  assign IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d596 =
	     { x__h14467 ^ y__h14468,
	       x__h14273 ^ y__h14274,
	       IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d595 } ;
  assign IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d597 =
	     { x__h14855 ^ y__h14856,
	       x__h14661 ^ y__h14662,
	       IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d596 } ;
  assign IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1 = a[15] ? ~a + 16'd1 : a ;
  assign IF_b_BIT_0_3_THEN_1_CONCAT_a_BITS_6_TO_0_4_5_E_ETC___d16 =
	     b[0] ? product__h788 : 16'd0 ;
  assign IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b___d247 =
	     b[15] ? ~b + 16'd1 : b ;
  assign IF_b_BIT_1_2_THEN_IF_b_BIT_0_3_THEN_1_CONCAT_a_ETC___d19 =
	     b[1] ?
	       product__h765 :
	       IF_b_BIT_0_3_THEN_1_CONCAT_a_BITS_6_TO_0_4_5_E_ETC___d16 ;
  assign IF_b_BIT_2_1_THEN_IF_b_BIT_1_2_THEN_IF_b_BIT_0_ETC___d23 =
	     b[2] ?
	       product__h742 :
	       IF_b_BIT_1_2_THEN_IF_b_BIT_0_3_THEN_1_CONCAT_a_ETC___d19 ;
  assign IF_b_BIT_3_0_THEN_IF_b_BIT_2_1_THEN_IF_b_BIT_1_ETC___d27 =
	     b[3] ?
	       product__h719 :
	       IF_b_BIT_2_1_THEN_IF_b_BIT_1_2_THEN_IF_b_BIT_0_ETC___d23 ;
  assign IF_b_BIT_4_THEN_IF_b_BIT_3_0_THEN_IF_b_BIT_2_1_ETC___d32 =
	     b[4] ?
	       product__h696 :
	       IF_b_BIT_3_0_THEN_IF_b_BIT_2_1_THEN_IF_b_BIT_1_ETC___d27 ;
  assign IF_b_BIT_5_THEN_IF_b_BIT_4_THEN_IF_b_BIT_3_0_T_ETC___d37 =
	     b[5] ?
	       product__h673 :
	       IF_b_BIT_4_THEN_IF_b_BIT_3_0_THEN_IF_b_BIT_2_1_ETC___d32 ;
  assign IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_4_THE_ETC___d48 =
	     (b[6] ?
		product__h650 :
		IF_b_BIT_5_THEN_IF_b_BIT_4_THEN_IF_b_BIT_3_0_T_ETC___d37) +
	     { 2'd1, a[6:0], 7'd0 } ;
  assign IF_x721_BIT_0_XOR_x838_BIT_0_THEN_1_ELSE_0__q2 =
	     (x__h1721[0] ^ x__h1838[0]) ? 32'd1 : 32'd0 ;
  assign _theResult_____1_fst__h931 =
	     IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_4__ETC___d58 ?
	       c[30:23] :
	       result_exp__h330 ;
  assign c_mant_aligned___1__h1728 =
	     c_mant_aligned__h332 >> delta_exp__h1726 ;
  assign c_mant_aligned__h332 = { 1'b1, c[22:0] } ;
  assign delta_exp__h1726 = result_exp__h330 - c[30:23] ;
  assign delta_exp__h933 = c[30:23] - result_exp__h330 ;
  assign product___1__h8549 = ~product___2__h8503 ;
  assign product___1__h8550 = product___1__h8549 + 32'd1 ;
  assign product___2__h8503 =
	     IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b___d247[14] ?
	       product__h8951 :
	       IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d349 ;
  assign product__h650 =
	     IF_b_BIT_5_THEN_IF_b_BIT_4_THEN_IF_b_BIT_3_0_T_ETC___d37 +
	     { 3'd1, a[6:0], 6'd0 } ;
  assign product__h673 =
	     IF_b_BIT_4_THEN_IF_b_BIT_3_0_THEN_IF_b_BIT_2_1_ETC___d32 +
	     { 4'd1, a[6:0], 5'd0 } ;
  assign product__h696 =
	     IF_b_BIT_3_0_THEN_IF_b_BIT_2_1_THEN_IF_b_BIT_1_ETC___d27 +
	     { 5'd1, a[6:0], 4'd0 } ;
  assign product__h719 =
	     IF_b_BIT_2_1_THEN_IF_b_BIT_1_2_THEN_IF_b_BIT_0_ETC___d23 +
	     { 6'd1, a[6:0], 3'd0 } ;
  assign product__h742 =
	     IF_b_BIT_1_2_THEN_IF_b_BIT_0_3_THEN_1_CONCAT_a_ETC___d19 +
	     { 7'd1, a[6:0], 2'd0 } ;
  assign product__h765 =
	     IF_b_BIT_0_3_THEN_1_CONCAT_a_BITS_6_TO_0_4_5_E_ETC___d16 +
	     { 8'd1, a[6:0], 1'd0 } ;
  assign product__h788 = { 9'd1, a[6:0] } ;
  assign product__h8951 =
	     IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d349 +
	     { 3'd0, IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1[14:0], 14'd0 } ;
  assign product__h8974 =
	     IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d340 +
	     { 4'd0, IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1[14:0], 13'd0 } ;
  assign product__h8997 =
	     IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d331 +
	     { 5'd0, IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1[14:0], 12'd0 } ;
  assign product__h9020 =
	     IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d323 +
	     { 6'd0, IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1[14:0], 11'd0 } ;
  assign product__h9043 =
	     IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d315 +
	     { 7'd0, IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1[14:0], 10'd0 } ;
  assign product__h9066 =
	     IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d308 +
	     { 8'd0, IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1[14:0], 9'd0 } ;
  assign product__h9089 =
	     IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d301 +
	     { 9'd0, IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1[14:0], 8'd0 } ;
  assign product__h9112 =
	     IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d295 +
	     { 10'd0, IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1[14:0], 7'd0 } ;
  assign product__h9135 =
	     IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d289 +
	     { 11'd0, IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1[14:0], 6'd0 } ;
  assign product__h9158 =
	     IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d284 +
	     { 12'd0, IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1[14:0], 5'd0 } ;
  assign product__h9181 =
	     IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d279 +
	     { 13'd0, IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1[14:0], 4'd0 } ;
  assign product__h9204 =
	     IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d275 +
	     { 14'd0, IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1[14:0], 3'd0 } ;
  assign product__h9227 =
	     IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d271 +
	     { 15'd0, IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1[14:0], 2'd0 } ;
  assign product__h9250 =
	     IF_IF_b_BIT_15_THEN_INV_b_45_PLUS_1_46_ELSE_b__ETC___d268 +
	     { 16'd0, IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1[14:0], 1'd0 } ;
  assign product__h9273 =
	     { 17'd0, IF_a_BIT_15_THEN_INV_a_PLUS_1_ELSE_a__q1[14:0] } ;
  assign result_exp___1__h841 = x__h858 + 8'd130 ;
  assign result_exp__h326 = x__h858 + 8'd129 ;
  assign result_exp__h330 =
	     IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_4_THE_ETC___d48[14] ?
	       result_exp__h326 :
	       result_exp___1__h841 ;
  assign result_mant___1__h840 =
	     { IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_4_THE_ETC___d48[14:0],
	       1'b0 } ;
  assign result_mant__h1750 =
	     { IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_4_THE_ETC___d48[13:0],
	       2'b0 } ;
  assign result_mant__h329 =
	     IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_4_THE_ETC___d48[14] ?
	       result_mant__h1750 :
	       result_mant___1__h840 ;
  assign result_mant_aligned__h1727 = { 1'b1, result_mant__h329, 7'b0 } ;
  assign result_mant_aligned__h934 =
	     { 8'd0, result_mant__h329 } >> delta_exp__h933 ;
  assign x__h10005 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[4] ^
	     c[4] ;
  assign x__h10064 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[3] &
	     c[3] ;
  assign x__h10199 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[5] ^
	     c[5] ;
  assign x__h10258 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[4] &
	     c[4] ;
  assign x__h10393 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[6] ^
	     c[6] ;
  assign x__h10452 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[5] &
	     c[5] ;
  assign x__h10587 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[7] ^
	     c[7] ;
  assign x__h10646 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[6] &
	     c[6] ;
  assign x__h10781 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[8] ^
	     c[8] ;
  assign x__h10840 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[7] &
	     c[7] ;
  assign x__h10975 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[9] ^
	     c[9] ;
  assign x__h11034 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[8] &
	     c[8] ;
  assign x__h11169 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[10] ^
	     c[10] ;
  assign x__h11228 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[9] &
	     c[9] ;
  assign x__h11363 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[11] ^
	     c[11] ;
  assign x__h11422 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[10] &
	     c[10] ;
  assign x__h11557 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[12] ^
	     c[12] ;
  assign x__h11616 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[11] &
	     c[11] ;
  assign x__h11751 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[13] ^
	     c[13] ;
  assign x__h11810 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[12] &
	     c[12] ;
  assign x__h11945 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[14] ^
	     c[14] ;
  assign x__h12004 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[13] &
	     c[13] ;
  assign x__h12139 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[15] ^
	     c[15] ;
  assign x__h12198 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[14] &
	     c[14] ;
  assign x__h12333 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[16] ^
	     c[16] ;
  assign x__h12392 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[15] &
	     c[15] ;
  assign x__h12527 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[17] ^
	     c[17] ;
  assign x__h12586 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[16] &
	     c[16] ;
  assign x__h12721 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[18] ^
	     c[18] ;
  assign x__h12780 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[17] &
	     c[17] ;
  assign x__h12915 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[19] ^
	     c[19] ;
  assign x__h12974 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[18] &
	     c[18] ;
  assign x__h13109 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[20] ^
	     c[20] ;
  assign x__h13168 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[19] &
	     c[19] ;
  assign x__h13303 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[21] ^
	     c[21] ;
  assign x__h13362 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[20] &
	     c[20] ;
  assign x__h13497 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[22] ^
	     c[22] ;
  assign x__h13556 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[21] &
	     c[21] ;
  assign x__h13691 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[23] ^
	     c[23] ;
  assign x__h13750 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[22] &
	     c[22] ;
  assign x__h13885 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[24] ^
	     c[24] ;
  assign x__h13944 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[23] &
	     c[23] ;
  assign x__h14079 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[25] ^
	     c[25] ;
  assign x__h14138 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[24] &
	     c[24] ;
  assign x__h14273 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[26] ^
	     c[26] ;
  assign x__h14332 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[25] &
	     c[25] ;
  assign x__h14467 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[27] ^
	     c[27] ;
  assign x__h14526 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[26] &
	     c[26] ;
  assign x__h14661 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[28] ^
	     c[28] ;
  assign x__h14720 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[27] &
	     c[27] ;
  assign x__h14855 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[29] ^
	     c[29] ;
  assign x__h14914 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[28] &
	     c[28] ;
  assign x__h15049 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[30] ^
	     c[30] ;
  assign x__h15108 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[29] &
	     c[29] ;
  assign x__h15243 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[31] ^
	     c[31] ;
  assign x__h15302 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[30] &
	     c[30] ;
  assign x__h1721 =
	     IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_4__ETC___d58 ?
	       result_mant_aligned__h934 :
	       result_mant_aligned__h1727 ;
  assign x__h1838 =
	     IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_4__ETC___d58 ?
	       c_mant_aligned__h332 :
	       c_mant_aligned___1__h1728 ;
  assign x__h1938 = x__h1721[1] ^ x__h1838[1] ;
  assign x__h2126 = x__h1721[2] ^ x__h1838[2] ;
  assign x__h2183 = x__h1721[1] & x__h1838[1] ;
  assign x__h2314 = x__h1721[3] ^ x__h1838[3] ;
  assign x__h2371 = x__h1721[2] & x__h1838[2] ;
  assign x__h2502 = x__h1721[4] ^ x__h1838[4] ;
  assign x__h2559 = x__h1721[3] & x__h1838[3] ;
  assign x__h2690 = x__h1721[5] ^ x__h1838[5] ;
  assign x__h2747 = x__h1721[4] & x__h1838[4] ;
  assign x__h2878 = x__h1721[6] ^ x__h1838[6] ;
  assign x__h2935 = x__h1721[5] & x__h1838[5] ;
  assign x__h301 =
	     { a[15] ^ b[15],
	       _theResult_____1_fst__h931,
	       IF_IF_IF_b_BIT_6_THEN_IF_b_BIT_5_THEN_IF_b_BIT_ETC___d242 } ;
  assign x__h3066 = x__h1721[7] ^ x__h1838[7] ;
  assign x__h3123 = x__h1721[6] & x__h1838[6] ;
  assign x__h3254 = x__h1721[8] ^ x__h1838[8] ;
  assign x__h3311 = x__h1721[7] & x__h1838[7] ;
  assign x__h3442 = x__h1721[9] ^ x__h1838[9] ;
  assign x__h3499 = x__h1721[8] & x__h1838[8] ;
  assign x__h3630 = x__h1721[10] ^ x__h1838[10] ;
  assign x__h3687 = x__h1721[9] & x__h1838[9] ;
  assign x__h3818 = x__h1721[11] ^ x__h1838[11] ;
  assign x__h3875 = x__h1721[10] & x__h1838[10] ;
  assign x__h4006 = x__h1721[12] ^ x__h1838[12] ;
  assign x__h4063 = x__h1721[11] & x__h1838[11] ;
  assign x__h4194 = x__h1721[13] ^ x__h1838[13] ;
  assign x__h4251 = x__h1721[12] & x__h1838[12] ;
  assign x__h4382 = x__h1721[14] ^ x__h1838[14] ;
  assign x__h4439 = x__h1721[13] & x__h1838[13] ;
  assign x__h4570 = x__h1721[15] ^ x__h1838[15] ;
  assign x__h4627 = x__h1721[14] & x__h1838[14] ;
  assign x__h4758 = x__h1721[16] ^ x__h1838[16] ;
  assign x__h4815 = x__h1721[15] & x__h1838[15] ;
  assign x__h4946 = x__h1721[17] ^ x__h1838[17] ;
  assign x__h5003 = x__h1721[16] & x__h1838[16] ;
  assign x__h5134 = x__h1721[18] ^ x__h1838[18] ;
  assign x__h5191 = x__h1721[17] & x__h1838[17] ;
  assign x__h5322 = x__h1721[19] ^ x__h1838[19] ;
  assign x__h5379 = x__h1721[18] & x__h1838[18] ;
  assign x__h5510 = x__h1721[20] ^ x__h1838[20] ;
  assign x__h5567 = x__h1721[19] & x__h1838[19] ;
  assign x__h5698 = x__h1721[21] ^ x__h1838[21] ;
  assign x__h5755 = x__h1721[20] & x__h1838[20] ;
  assign x__h5886 = x__h1721[22] ^ x__h1838[22] ;
  assign x__h5943 = x__h1721[21] & x__h1838[21] ;
  assign x__h7752 =
	     { x__h15243 ^ y__h15244,
	       x__h15049 ^ y__h15050,
	       IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d597 } ;
  assign x__h858 = a[14:7] + b[14:7] ;
  assign x__h9423 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[1] ^
	     c[1] ;
  assign x__h9617 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[2] ^
	     c[2] ;
  assign x__h9676 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[1] &
	     c[1] ;
  assign x__h9811 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[3] ^
	     c[3] ;
  assign x__h9870 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[2] &
	     c[2] ;
  assign y__h10006 = x__h10064 | y__h10065 ;
  assign y__h10065 = y__h9812 & x__h9811 ;
  assign y__h10200 = x__h10258 | y__h10259 ;
  assign y__h10259 = y__h10006 & x__h10005 ;
  assign y__h10394 = x__h10452 | y__h10453 ;
  assign y__h10453 = y__h10200 & x__h10199 ;
  assign y__h10588 = x__h10646 | y__h10647 ;
  assign y__h10647 = y__h10394 & x__h10393 ;
  assign y__h10782 = x__h10840 | y__h10841 ;
  assign y__h10841 = y__h10588 & x__h10587 ;
  assign y__h10976 = x__h11034 | y__h11035 ;
  assign y__h11035 = y__h10782 & x__h10781 ;
  assign y__h11170 = x__h11228 | y__h11229 ;
  assign y__h11229 = y__h10976 & x__h10975 ;
  assign y__h11364 = x__h11422 | y__h11423 ;
  assign y__h11423 = y__h11170 & x__h11169 ;
  assign y__h11558 = x__h11616 | y__h11617 ;
  assign y__h11617 = y__h11364 & x__h11363 ;
  assign y__h11752 = x__h11810 | y__h11811 ;
  assign y__h11811 = y__h11558 & x__h11557 ;
  assign y__h11946 = x__h12004 | y__h12005 ;
  assign y__h12005 = y__h11752 & x__h11751 ;
  assign y__h12140 = x__h12198 | y__h12199 ;
  assign y__h12199 = y__h11946 & x__h11945 ;
  assign y__h12334 = x__h12392 | y__h12393 ;
  assign y__h12393 = y__h12140 & x__h12139 ;
  assign y__h12528 = x__h12586 | y__h12587 ;
  assign y__h12587 = y__h12334 & x__h12333 ;
  assign y__h12722 = x__h12780 | y__h12781 ;
  assign y__h12781 = y__h12528 & x__h12527 ;
  assign y__h12916 = x__h12974 | y__h12975 ;
  assign y__h12975 = y__h12722 & x__h12721 ;
  assign y__h13110 = x__h13168 | y__h13169 ;
  assign y__h13169 = y__h12916 & x__h12915 ;
  assign y__h13304 = x__h13362 | y__h13363 ;
  assign y__h13363 = y__h13110 & x__h13109 ;
  assign y__h13498 = x__h13556 | y__h13557 ;
  assign y__h13557 = y__h13304 & x__h13303 ;
  assign y__h13692 = x__h13750 | y__h13751 ;
  assign y__h13751 = y__h13498 & x__h13497 ;
  assign y__h13886 = x__h13944 | y__h13945 ;
  assign y__h13945 = y__h13692 & x__h13691 ;
  assign y__h14080 = x__h14138 | y__h14139 ;
  assign y__h14139 = y__h13886 & x__h13885 ;
  assign y__h14274 = x__h14332 | y__h14333 ;
  assign y__h14333 = y__h14080 & x__h14079 ;
  assign y__h14468 = x__h14526 | y__h14527 ;
  assign y__h14527 = y__h14274 & x__h14273 ;
  assign y__h14662 = x__h14720 | y__h14721 ;
  assign y__h14721 = y__h14468 & x__h14467 ;
  assign y__h14856 = x__h14914 | y__h14915 ;
  assign y__h14915 = y__h14662 & x__h14661 ;
  assign y__h15050 = x__h15108 | y__h15109 ;
  assign y__h15109 = y__h14856 & x__h14855 ;
  assign y__h15244 = x__h15302 | y__h15303 ;
  assign y__h15303 = y__h15050 & x__h15049 ;
  assign y__h1939 = x__h1721[0] & x__h1838[0] ;
  assign y__h2127 = x__h2183 | y__h2184 ;
  assign y__h2184 = y__h1939 & x__h1938 ;
  assign y__h2315 = x__h2371 | y__h2372 ;
  assign y__h2372 = y__h2127 & x__h2126 ;
  assign y__h2503 = x__h2559 | y__h2560 ;
  assign y__h2560 = y__h2315 & x__h2314 ;
  assign y__h2691 = x__h2747 | y__h2748 ;
  assign y__h2748 = y__h2503 & x__h2502 ;
  assign y__h2879 = x__h2935 | y__h2936 ;
  assign y__h2936 = y__h2691 & x__h2690 ;
  assign y__h3067 = x__h3123 | y__h3124 ;
  assign y__h3124 = y__h2879 & x__h2878 ;
  assign y__h3255 = x__h3311 | y__h3312 ;
  assign y__h3312 = y__h3067 & x__h3066 ;
  assign y__h3443 = x__h3499 | y__h3500 ;
  assign y__h3500 = y__h3255 & x__h3254 ;
  assign y__h3631 = x__h3687 | y__h3688 ;
  assign y__h3688 = y__h3443 & x__h3442 ;
  assign y__h3819 = x__h3875 | y__h3876 ;
  assign y__h3876 = y__h3631 & x__h3630 ;
  assign y__h4007 = x__h4063 | y__h4064 ;
  assign y__h4064 = y__h3819 & x__h3818 ;
  assign y__h4195 = x__h4251 | y__h4252 ;
  assign y__h4252 = y__h4007 & x__h4006 ;
  assign y__h4383 = x__h4439 | y__h4440 ;
  assign y__h4440 = y__h4195 & x__h4194 ;
  assign y__h4571 = x__h4627 | y__h4628 ;
  assign y__h4628 = y__h4383 & x__h4382 ;
  assign y__h4759 = x__h4815 | y__h4816 ;
  assign y__h4816 = y__h4571 & x__h4570 ;
  assign y__h4947 = x__h5003 | y__h5004 ;
  assign y__h5004 = y__h4759 & x__h4758 ;
  assign y__h5135 = x__h5191 | y__h5192 ;
  assign y__h5192 = y__h4947 & x__h4946 ;
  assign y__h5323 = x__h5379 | y__h5380 ;
  assign y__h5380 = y__h5135 & x__h5134 ;
  assign y__h5511 = x__h5567 | y__h5568 ;
  assign y__h5568 = y__h5323 & x__h5322 ;
  assign y__h5699 = x__h5755 | y__h5756 ;
  assign y__h5756 = y__h5511 & x__h5510 ;
  assign y__h5887 = x__h5943 | y__h5944 ;
  assign y__h5944 = y__h5699 & x__h5698 ;
  assign y__h9424 =
	     IF_a_BIT_15_EQ_b_BIT_15_44_THEN_IF_IF_b_BIT_15_ETC___d362[0] &
	     c[0] ;
  assign y__h9618 = x__h9676 | y__h9677 ;
  assign y__h9677 = y__h9424 & x__h9423 ;
  assign y__h9812 = x__h9870 | y__h9871 ;
  assign y__h9871 = y__h9618 & x__h9617 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        a <= `BSV_ASSIGNMENT_DELAY 16'd0;
	b <= `BSV_ASSIGNMENT_DELAY 16'd0;
	c <= `BSV_ASSIGNMENT_DELAY 32'd0;
	out <= `BSV_ASSIGNMENT_DELAY 32'd0;
	s <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (a_EN) a <= `BSV_ASSIGNMENT_DELAY a_D_IN;
	if (b_EN) b <= `BSV_ASSIGNMENT_DELAY b_D_IN;
	if (c_EN) c <= `BSV_ASSIGNMENT_DELAY c_D_IN;
	if (out_EN) out <= `BSV_ASSIGNMENT_DELAY out_D_IN;
	if (s_EN) s <= `BSV_ASSIGNMENT_DELAY s_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    a = 16'hAAAA;
    b = 16'hAAAA;
    c = 32'hAAAAAAAA;
    out = 32'hAAAAAAAA;
    s = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkMac

